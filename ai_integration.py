import logging
from openai import OpenAI
from config import OPENAI_API_KEY

logger = logging.getLogger(__name__)


class AIAssistant:
    def __init__(self):
        self.ai_available = False
        self.client = None
        self.model = "gpt-4o-mini"
        self.conversation_history = {}
        
        # Try to initialize OpenAI client
        try:
            if OPENAI_API_KEY == "YOUR_OPENAI_KEY_HERE":
                logger.warning("‚ö†Ô∏è OpenAI API Key not configured. AI features will be disabled.")
                return
            
            self.client = OpenAI(api_key=OPENAI_API_KEY)
            self.ai_available = True
            logger.info("‚úÖ OpenAI client initialized successfully")
        except TypeError as e:
            logger.warning(f"‚ö†Ô∏è OpenAI initialization error (compatibility issue): {e}")
            logger.info("üîß Installing compatible versions...")
            self.ai_available = False
        except Exception as e:
            logger.error(f"‚ùå Error initializing OpenAI: {e}")
            self.ai_available = False

    def get_bet_suggestion(self, match_data):
        """
        Get AI-powered bet suggestion for a match
        """
        if not self.ai_available:
            return self._get_default_suggestion(match_data)
        
        try:
            prompt = f"""
‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡•§ ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶¶‡¶ø‡¶®:

‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö ‡¶§‡¶•‡ßç‡¶Ø:
- ‡¶π‡ßã‡¶Æ ‡¶ü‡¶ø‡¶Æ: {match_data.get('home_team')}
- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡ßá ‡¶ü‡¶ø‡¶Æ: {match_data.get('away_team')}
- ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º: {match_data.get('commence_time')}
- ‡¶Ö‡¶°‡¶∏: {match_data.get('odds', {})}

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶®‡ßá ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®:
1. ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤
2. ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂‡¶ï‡ßÉ‡¶§ ‡¶¨‡ßá‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£
3. ‡¶ù‡ßÅ‡¶Å‡¶ï‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£
4. ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ

‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨‡¶∂‡ßÄ‡¶≤ ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ ‡¶¶‡¶ø‡¶®‡•§
"""
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶ï‡¶®‡¶∏‡¶æ‡¶≤‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü ‡¶Ø‡¶ø‡¶®‡¶ø ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨‡¶∂‡ßÄ‡¶≤ ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶®‡•§ ‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®‡•§"},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"Error getting bet suggestion: {e}")
            return self._get_default_suggestion(match_data)

    def _get_default_suggestion(self, match_data):
        """
        Get default suggestion when AI is unavailable
        """
        home = match_data.get('home_team', 'Unknown')
        away = match_data.get('away_team', 'Unknown')
        return f"""
‚ö†Ô∏è ‡¶è‡¶Ü‡¶á ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶è‡¶ñ‡¶® ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º‡•§

üèÜ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö: {home} ‡¶¨‡¶®‡¶æ‡¶Æ {away}

üí° ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂:
‚Ä¢ ‡¶õ‡ßã‡¶ü ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡ßá ‡¶¨‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ø‡¶æ ‡¶π‡¶æ‡¶∞‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶§‡¶æ ‡¶¨‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡ßÄ ‡¶ï‡ßå‡¶∂‡¶≤ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®

‚öôÔ∏è ‡¶ü‡¶ø‡¶™: ‡¶è‡¶Ü‡¶á ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶™‡ßá‡¶§‡ßá OPENAI_API_KEY ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
"""

    def get_response(self, user_id, user_message):
        """
        Get conversational response from AI
        """
        if not self.ai_available:
            return "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶® ‡¶è‡¶Ü‡¶á ‡¶∏‡ßá‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ‡•§ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶Ü‡¶∞‡ßã ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø /help ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§"
        
        try:
            # Initialize conversation history for new users
            if user_id not in self.conversation_history:
                self.conversation_history[user_id] = []
            
            # Add user message to history
            self.conversation_history[user_id].append({
                "role": "user",
                "content": user_message
            })
            
            # Keep only last 10 messages for context
            if len(self.conversation_history[user_id]) > 10:
                self.conversation_history[user_id] = self.conversation_history[user_id][-10:]
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶¨‡¶ü ‡¶Ø‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨‡¶∂‡ßÄ‡¶≤ ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§ ‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®‡•§"}
                ] + self.conversation_history[user_id],
                max_tokens=300,
                temperature=0.7
            )
            
            assistant_message = response.choices[0].message.content
            
            # Add response to history
            self.conversation_history[user_id].append({
                "role": "assistant",
                "content": assistant_message
            })
            
            return assistant_message
        except Exception as e:
            logger.error(f"Error getting AI response: {e}")
            return "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶® ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"

    def analyze_betting_pattern(self, user_stats):
        """
        Analyze user's betting pattern and provide insights
        """
        if not self.ai_available:
            return "‡¶è‡¶Ü‡¶á ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶è‡¶ñ‡¶® ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        
        try:
            prompt = f"""
‡¶è‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶â‡¶®‡ßç‡¶®‡¶§‡¶ø‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶ø‡¶®:

- ‡¶Æ‡ßã‡¶ü ‡¶¨‡ßá‡¶ü: {user_stats.get('total_bet', 0)}
- ‡¶Æ‡ßã‡¶ü ‡¶ú‡¶Ø‡¶º: {user_stats.get('total_win', 0)}
- ‡¶Æ‡ßã‡¶ü ‡¶ï‡ßç‡¶∑‡¶§‡¶ø: {user_stats.get('total_loss', 0)}
- ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {user_stats.get('balance', 0)}

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶ø‡¶®‡•§
"""
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡ßá‡¶ü‡¶ø‡¶Ç ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶ï ‡¶Ø‡¶ø‡¶®‡¶ø ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨‡¶∂‡ßÄ‡¶≤ ‡¶ó‡ßá‡¶Æ‡¶ø‡¶Ç ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶®‡•§ ‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®‡•§"},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=400,
                temperature=0.7
            )
            
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"Error analyzing betting pattern: {e}")
            return "‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶è‡¶ñ‡¶® ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º‡•§"

    def clear_conversation_history(self, user_id):
        """
        Clear conversation history for a user
        """
        if user_id in self.conversation_history:
            del self.conversation_history[user_id]


# Initialize AI assistant with error handling
try:
    ai_assistant = AIAssistant()
except Exception as e:
    logger.error(f"Failed to create AI assistant: {e}")
    ai_assistant = AIAssistant()  # Create with fallback mode
